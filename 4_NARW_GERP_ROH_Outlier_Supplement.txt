

### generate file for site frequency spectra using Plink ###

plink2 --vcf <VCF path> --freq --pheno <population-file path> --loop-cats population

vcftools --vcf TEST.bh.srw.withHeader.vcf --keep srw.outliers.pop.file --hardy --out srw.outlier.af
vcftools --vcf TEST.bh.srw.withHeader.vcf --keep low.outlier.pop --hardy --out low.outlier.af
vcftools --vcf TEST.bh.srw.withHeader.vcf --keep high.outlier.pop --hardy --out high.outlier.af
vcftools --vcf TEST.bh.srw.withHeader.vcf --keep bh.outlier.pop --hardy --out bh.outlier.af


#################################################################################################
#																							    #
#						   Genome Evolutionary Rate Profiling (GERP)						    #
#																								#
#################################################################################################


### GERP analyses ###

# obtained .bw (bigwig) file with blue whale GERP scores from UCSC
# checked scores using linux and UCSC browser - to see tracks and get summary statistics

## used kenutils and bedops to conver bigwig to wig to bed #

### rename all the chromosomes in bed file to match VCF ###
cut -c1 blue_whale_gerp.bed |sed -e 's/\<1\>/NC_045785.1/g' -e 's/\<2\>/NC_045786.1/g' -e 's/\<3\>/NC_045787.1/g' -e 's/\<4\>/NC_045788.1/g' -e 's/\<5\>/NC_045789.1/g' -e 's/\<6\>/NC_045790.1/g' -e 's/\<7\>/NC_045791.1/g' -e 's/\<8\>/NC_045792.1/g' -e 's/\<9\>/NC_045793.1/g' -e 's/\<10\>/NC_045794.1/g' -e 's/\<11\>/NC_045795.1/g' -e 's/\<12\>/NC_045796.1/g' -e 's/\<13\>/NC_045797.1/g' -e 's/\<14\>/NC_045798.1/g' -e 's/\<15\>/NC_045799.1/g' -e 's/\<16\>/NC_045800.1/g' -e 's/\<17\>/NC_045801.1/g' -e 's/\<18\>/NC_045802.1/g' -e 's/\<19\>/NC_045803.1/g' -e 's/\<20\>/NC_045804.1/g' -e 's/\<21\>/NC_045805.1/g' -e 's/\<X\>/NC_045806.1/g' -e 's/\<Y\>/NC_045807.1/g' > blue_whale_gerp.chrom.list 

### reformat new bed file columns so just chrom, start, stop, and gerp score
paste blue_whale_gerp.chrom.list blue_whale_gerp.bed | awk '{ print $1,$3,$4,$6 }' > blue_whale_gerp.chrom.bed

### replace white spaces with tabs ###
tr -s " " "\t" < blue_whale_gerp.chrom.bed > blue_whale_gerp.chrom.tab.bed

## sort bed file
sort -k1,1 -k2,2n -k3,3n blue_whale_gerp.chrom.tab.bed > blue_whale_gerp.chrom.tab.sorted.bed


## bgzip the bed file
bgzip blue_whale_gerp.chrom.tab.sorted.bed

## tab index the zipped bedfile. parameters here are importatn
tabix -s 1 -b 2 -e 3 blue_whale_gerp.chrom.tab.sorted.bed.gz


####################################################
sort -k4,n4 blue_whale_gerp.chrom.header.bed | tail
NC_045785.1 111135 111142 0.179000
NC_045785.1 111142 111143 -0.358000
NC_045785.1 111143 111150 0.179000
NC_045785.1 111150 111151 -0.358000
NC_045785.1 111151 111155 0.179000
NC_045785.1 111155 111156 -0.358000
NC_045785.1 111156 111161 0.179000
NC_045785.1 111161 111162 -0.358000
NC_045785.1 111162 111166 0.179000
NC_045788.1 141974997 141975000 9.930000
NC_045788.1 141975001 141975003 9.930000
NC_045788.1 141975020 141975021 9.930000
NC_045788.1 141975024 141975025 9.930000
NC_045785.1 1479639 1479640 10.100000
NC_045785.1 1479642 1479643 10.100000
NC_045785.1 1479648 1479653 10.100000
NC_045785.1 1479663 1479664 10.100000
NC_045785.1 1479667 1479668 10.100000
NC_045785.1 1479675 1479676 10.100000
####################################################

## high
bcftools query -f '%CHROM\t%POS0\t%END\t%INFO\n' /home/rorton/projects/def-frasiert/rorton/MutationLoad/interspecific/autosomes/high.vcf.gz > high_annotations.bed
bedtools intersect -a blue_whale_gerp.chrom.tab.sorted.bed.gz -b high_annotations.bed -wa > high.gerp.overlap

## moderate
bcftools query -f '%CHROM\t%POS0\t%END\t%INFO\n' /home/rorton/projects/def-frasiert/rorton/MutationLoad/interspecific/autosomes/moderate.vcf > moderate_annotations.bed
bedtools intersect -a blue_whale_gerp.chrom.tab.sorted.bed.gz -b moderate_annotations.bed -wa > moderate.gerp.overlap

## low
bcftools query -f '%CHROM\t%POS0\t%END\t%INFO\n' /home/rorton/projects/def-frasiert/rorton/MutationLoad/interspecific/autosomes/low.vcf > low_annotations.bed
bedtools intersect -a blue_whale_gerp.chrom.tab.sorted.bed.gz -b low_annotations.bed -wa > low.gerp.overlap


## modifier
bcftools query -f '%CHROM\t%POS0\t%END\t%INFO\n' /home/rorton/projects/def-frasiert/rorton/MutationLoad/interspecific/autosomes/modifier.vcf > modifier_annotations.bed
bedtools intersect -a blue_whale_gerp.chrom.tab.sorted.bed.gz -b modifier_annotations.bed -wa > modifier.gerp.overlap


awk '{ total += $2 } END { print total/NR }' low.gerp.overlap
awk '{ total += $2 } END { print total/NR }' high.gerp.overlap
awk '{ total += $2 } END { print total/NR }' moderate.gerp.overlap
awk '{ total += $2 } END { print total/NR }' modifier.gerp.overlap

#low
#5.94056e+07
#high
#6.18496e+07
#moderate
#6.29279e+07
#modifier
#6.06656e+07

sort -k4,4n high.gerp.overlap | tail -10 | awk '{print $4}'

## 163 snps 
0.726000
0.729000
0.871000
0.881000
1.060000
1.590000
2.540000
3.750000
3.820000
3.910000

sort -k4,4n moderate.gerp.overlap | tail -10 | awk '{print $4}'

## 4509 snps
4.100000
4.110000
4.180000
4.450000
4.490000
4.610000
4.750000
4.760000
5.250000
6.550000

sort -k4,4n low.gerp.overlap | tail -10 | awk '{print $4}'

## 5624 snps
4.080000
4.080000
4.090000
4.190000
4.390000
4.780000
5.130000
5.450000
5.790000
6.370000


sort -k4,4n modifier.gerp.overlap | tail -10 | awk '{print $4}'

## 591678 snps
7.190000
7.220000
7.220000
7.220000
7.260000
7.270000
7.450000
7.700000
7.880000
8.910000




##### these scores do not match output from SnpEff because we used blue whale version 3 reference and the
##### gerp scores are generated from the version 2 blue whale reference. 


#################################################################################################
#																							    #
#						             Runs of homozygosity				                        #
#																								#
#################################################################################################


##### runs of homozygosity ####
##### TEST this script on single sample first #########



### get ROH using BCFtools -roh command. Use genotype likelihoods and empirical allele frequencies .. ###

bcftools roh /home/rorton/scratch/CSEE/gVCF/CSEE.X.interspecific.recode.vcf.gz | grep "SRR15669490" | grep "RG" | cut -f3,4,5,6 > /home/rorton/scratch/_roh/SRR15669490.roh.bed


### manipulate VCF to test overlap between derived homozygous genotypes and runs of homozygosity for each sample ###

vcftools --gzvcf /home/rorton/scratch/CSEE/interspecific/X/high.vcf --indv SRR15669490 --recode --recode-INFO-all --out /home/rorton/scratch/_roh/SRR15669490
bcftools view -i 'FMT/GT="1/1" || FMT/GT="1|1"' SRR15669490.recode.vcf  > SRR15669490.low.vcf

grep -v "^#" SRR15669490.low.vcf |wc -l

vcftools --gzvcf /home/rorton/scratch/CSEE/interspecific/X/high.vcf --indv EGL00252-1 --recode --recode-INFO-all --out /home/rorton/scratch/_roh/EGL00252
bcftools view -i 'FMT/GT="1/1" || FMT/GT="1|1"' EGL00252.recode.vcf > EGL00252.low.vcf

grep -v "^#" EGL00252.low.vcf |wc -l

### intersect ROH with high impact mutations and get sum ###

bedtools annotate -counts -i SRR15669490.roh.bed -files SRR15669490.low.vcf | awk '{ total += $5 } END { print total}'
# = 106 - low
# = 71/140 - moderate
# = 4/4 - high

bedtools annotate -counts -i EGL00252.roh.bed -files EGL00252.low.vcf | awk '{ total += $5 } END { print total}'
# = 162 - low
# = 110/181 - moderate
# = 3/6 - high

....

##############################
### now make this an array ###
##############################

#!/bin/bash

#SBATCH --time=2:00:00
#SBATCH --account=def-frasiert
#SBATCH --cpus-per-task=8
#SBATCH --mem=60G
#SBATCH --array=1-4


module load bcftools
module load vcftools
module load bedtools


SAMPLE=$(sed -n "${SLURM_ARRAY_TASK_ID}p" /home/rorton/scratch/CSEE/_text_files/autosomes_ROH_list.txt)
SAMPLES=`cat /home/rorton/scratch/CSEE/_text_files/autosomes_ROH_list.txt`
CHROMS=`cat /home/rorton/scratch/CSEE/_text_files/chromosome.list`
IMPACTS=`cat /home/rorton/scratch/CSEE/_text_files/impact.list`



### get ROH ###
for SAMPLE in $SAMPLES; do
	for CHROM in $CHROMS; do

bcftools roh /home/rorton/scratch/CSEE/gVCF/CSEE.${CHROM}.interspecific.recode.vcf.gz | grep "${SAMPLE}" | grep "RG" | cut -f3,4,5,6 > /home/rorton/scratch/_roh/roh_beds/${CHROM}.${SAMPLE}.roh.bed

done; done


### prepare VCF for overlap test #####
SAMPLES=`cat /home/rorton/scratch/CSEE/_text_files/autosomes_ROH_list.txt`
CHROMS=`cat /home/rorton/scratch/CSEE/_text_files/chromosome.list`
IMPACTS=`cat /home/rorton/scratch/CSEE/_text_files/impact.list`

module load vcftools
module load bcftools

for SAMPLE in $SAMPLES; do
	for CHROM in $CHROMS; do
    	for IMPACT in $IMPACTS; do

vcftools --gzvcf /home/rorton/scratch/CSEE/interspecific/${CHROM}/${IMPACT}.vcf --indv ${SAMPLE} --recode --recode-INFO-all --stdout | bcftools view -i 'FMT/GT="1/1" || FMT/GT="1|1"' > /home/rorton/scratch/_roh/intermdediate_VCF/${SAMPLE}.${CHROM}.${IMPACT}.vcf

done; done; done




### intersect ROH with high impact mutations and get sum ###

for SAMPLE in $SAMPLES; do
	for CHROM in $CHROMS; do
    	for IMPACT in $IMPACTS; do

bedtools annotate -counts -i /home/rorton/scratch/_roh/roh_beds/${CHROM}.${SAMPLE}.roh.bed -files /home/rorton/scratch/_roh/intermdediate_VCF/${SAMPLE}.${CHROM}.${IMPACT}.vcf | awk '{ total += $5 } END { print total}' >> enriched.counts

done; done; done



### get total number of homozygous genotypes per impact for each sample ###

for SAMPLE in $SAMPLES; do
	for CHROM in $CHROMS; do
    	for IMPACT in $IMPACTS; do

grep -v "^#" /home/rorton/scratch/_roh/intermdediate_VCF/${SAMPLE}.${CHROM}.${IMPACT}.vcf | wc -l >> total.counts


done; done; done


### get ROH for each sample


bcftools roh /home/rorton/scratch/CSEE/gVCF/CSEE.autosomes.interspecific.recode.vcf.gz -O r -o roh.all.autosomes.bed

bcftools roh /home/rorton/scratch/CSEE/gVCF/CSEE.X.interspecific.recode.vcf.gz -O r -o roh.all.X.bed


### set population for each column ####
data$Population <- case_when(
data$V2=="EGL00252-1" ~ "NARW",
data$V2=="EGL013-3qa" ~ "NARW",
data$V2=="EGL140-1" ~ "NARW",
data$V2=="EGL183-1" ~ "NARW",
data$V2=="EGL254-1" ~ "NARW",
data$V2=="EGL272-1" ~ "NARW",
data$V2=="EGL276-1" ~ "NARW",
data$V2=="EGL308-1a" ~ "NARW",
data$V2=="EGL312-1a" ~ "NARW",
data$V2=="EGL336_1b" ~ "NARW",
data$V2=="SID179132" ~ "NARW",
data$V2=="SID181803" ~ "NARW",
data$V2=="SRR15669485" ~ "BH",
data$V2=="SRR15669487" ~ "BH",
data$V2=="SRR15669488" ~ "BH",
data$V2=="SRR15669489" ~ "BH",
data$V2=="SRR15669490" ~ "BH",
data$V2=="SRR15669491" ~ "BH",
data$V2=="SRR15669492" ~ "BH",
data$V2=="SRR15669493" ~ "BH",
data$V2=="SRR15669494" ~ "BH",
data$V2=="SRR15669495" ~ "BH",
data$V2=="Eau017" ~ "SRW",
data$V2=="Eau018" ~ "SRW",
data$V2=="Eau019" ~ "SRW",
data$V2=="Eau023" ~ "SRW",
data$V2=="Eau029" ~ "SRW",
data$V2=="Eau034A" ~ "SRW",
data$V2=="Eau10b" ~ "SRW",
data$V2=="Eau283" ~ "SRW",
data$V2=="Eau7" ~ "SRW",
data$V2=="Eau9c" ~ "SRW",
    TRUE ~ "unknown"
)



write.table(data, "/home/rorton/scratch/_roh/autosomes.population.roh", sep="\t")




#################################################################################################
#																							    #
#						          Allele frequencies (Theta/SFS)							    #
#																								#
#################################################################################################


### get counts of number of segregating sites per population ###



### used easy SFS (python) to estimate allele counts at different frequencies ... 

## downsample  and generate the unfolded SFS ... use the dadi formatted output 


## autosomes 
# high impact 
./easySFS.py -i /Volumes/cetacea/Genetic_load/interspecific/annotated_GVCF/autosomes/high.vcf -p /Volumes/cetacea/Genetic_load/_text_files/PopMap.txt --proj 24,20,20 -o /Volumes/cetacea/Genetic_load/SFS/autosomes/high -f -a --unfolded

# moderate impact
./easySFS.py -i /Volumes/cetacea/Genetic_load/interspecific/annotated_GVCF/autosomes/moderate.vcf -p /Volumes/cetacea/Genetic_load/_text_files/PopMap.txt --proj 24,20,20 -o /Volumes/cetacea/Genetic_load/SFS/autosomes/moderate -f -a --unfolded

# low impact
./easySFS.py -i /Volumes/cetacea/Genetic_load/interspecific/annotated_GVCF/autosomes/low.vcf -p /Volumes/cetacea/Genetic_load/_text_files/PopMap.txt --proj 24,20,20 -o /Volumes/cetacea/Genetic_load/SFS/autosomes/low -f -a --unfolded

# modifier impact
./easySFS.py -i /Volumes/cetacea/Genetic_load/interspecific/annotated_GVCF/autosomes/modifier.vcf -p /Volumes/cetacea/Genetic_load/_text_files/PopMap.txt --proj 24,20,20 -o /Volumes/cetacea/Genetic_load/SFS/autosomes/modifier -f -a --unfolded




## X 
# high impact 
./easySFS.py -i /Volumes/cetacea/Genetic_load/interspecific/annotated_GVCF/X/high.vcf -p /Volumes/cetacea/Genetic_load/_text_files/females_pop_map_A --proj 20,10,6 -o /Volumes/cetacea/Genetic_load/SFS/X/high -f -a --unfolded

# moderate impact
./easySFS.py -i /Volumes/cetacea/Genetic_load/interspecific/annotated_GVCF/X/moderate.vcf -p /Volumes/cetacea/Genetic_load/_text_files/females_pop_map_A --proj 20,10,6 -o /Volumes/cetacea/Genetic_load/SFS/X/moderate -f -a --unfolded

# low impact
./easySFS.py -i /Volumes/cetacea/Genetic_load/interspecific/annotated_GVCF/X/low.vcf -p /Volumes/cetacea/Genetic_load/_text_files/females_pop_map_A --proj 20,10,6 -o /Volumes/cetacea/Genetic_load/SFS/X/low -f -a --unfolded

# modifier impact
./easySFS.py -i /Volumes/cetacea/Genetic_load/interspecific/annotated_GVCF/X/modifier.vcf -p /Volumes/cetacea/Genetic_load/_text_files/females_pop_map_A --proj 20,10,6 -o /Volumes/cetacea/Genetic_load/SFS/X/modifier -f -a --unfolded




### manually added population, impact, and chromosome in excel. should be automated though ... 






#################################################################################################
#																							    #
#						                      Outlier analyses						      	    #
#																								#
#################################################################################################



### PCAdapt ###



## R packages used ##

if (!require("BiocManager", quietly = TRUE))
    install.packages("BiocManager")

BiocManager::install("qvalue")

library("pcadapt")
library("qvalue")
#library("OutFLANK")
#library("ggplot2")
library(vcfR)
library(hierfstat)
library(adegenet)
library(radiator)




## convert vcf to bed using PLINK ##
plink2 --vcf /home/rorton/projects/def-frasiert/rorton/MutationLoad/NARW_specific/X/annotated.X.NARW.segregating.parsed.vcf.gz --make-bed --out pcadapt --allow-extra-chr

plink2 --vcf autosomes.all.ns.vcf --make-bed --out autosomes.pcadapt --allow-extra-chr
plink2 --vcf X.all.ns.vcf --make-bed --out X.pcadapt --allow-extra-chr


## run PCAdapt in R ##


### autosomes ###
data <- read.pcadapt("/home/rorton/projects/def-frasiert/rorton/MutationLoad/NARW_specific/autosomes.pcadapt.bed", type = "bed")

data2 <- read.vcfR("/home/rorton/projects/def-frasiert/rorton/MutationLoad/NARW_specific/autosomes.all.ns.vcf")
data3 <- vcfR2genlight(data2)


snp <- as.data.frame(locNames(data3))
ind <- as.data.frame(data3@ind.names)
colnames(ind) <-"INDIVIDUALS"

pop_map <- read.table("/home/rorton/projects/def-frasiert/rorton/MutationLoad/_text_files/NARW.females.pop", header=TRUE, stringsAsFactors = TRUE)
ind_pop_map <- merge(ind, pop_map, by=c("INDIVIDUALS"))


data_pcadapt <- pcadapt(data, K = 2, min.maf = .05) 

pca_adapt_pop_map_auto <-cbind(data_pcadapt$scores, ind_pop_map) 
colnames(pca_adapt_pop_map_auto) <- c("PC1","PC2", "IND","POPULATION")

snps_pvalues <- cbind(snp, data_pcadapt$pvalues)
snps_pvalues_no_na_X <- na.omit(snps_pvalues)


write.table(pca_adapt_pop_map_X, "/home/rorton/projects/def-frasiert/rorton/MutationLoad/NARW_specific/pca_adapt_pop_map_autosomes", sep="\t", quote=FALSE)
write.table(snps_pvalues_no_na_X, "/home/rorton/projects/def-frasiert/rorton/MutationLoad/NARW_specific/nps_pvalues_no_na_autosomes", sep="\t", quote=FALSE)



#### X ######

data <- read.pcadapt("/home/rorton/projects/def-frasiert/rorton/MutationLoad/NARW_specific/X.pcadapt.bed", type = "bed")

data2 <- read.vcfR("/home/rorton/projects/def-frasiert/rorton/MutationLoad/NARW_specific/X.all.ns.vcf")
data3 <- vcfR2genlight(data2)


snp <- as.data.frame(locNames(data3))
ind <- as.data.frame(data3@ind.names)
colnames(ind) <-"INDIVIDUALS"

pop_map <- read.table("/home/rorton/projects/def-frasiert/rorton/MutationLoad/_text_files/NARW.females.pop", header=TRUE, stringsAsFactors = TRUE)
ind_pop_map <- merge(ind, pop_map, by=c("INDIVIDUALS"))


data_pcadapt <- pcadapt(data, K = 2, min.maf = .05) 

pca_adapt_pop_map_X <-cbind(data_pcadapt$scores, ind_pop_map) 
colnames(pca_adapt_pop_map_X) <- c("PC1","PC2", "IND","POPULATION")

snps_pvalues <- cbind(snp, data_pcadapt$pvalues)
snps_pvalues_no_na_X <- na.omit(snps_pvalues)


write.table(pca_adapt_pop_map_X, "/home/rorton/projects/def-frasiert/rorton/MutationLoad/NARW_specific/pca_adapt_pop_map_X", sep="\t", quote=FALSE)
write.table(snps_pvalues_no_na_X, "/home/rorton/projects/def-frasiert/rorton/MutationLoad/NARW_specific/nps_pvalues_no_na_X", sep="\t", quote=FALSE)







quantile(snps_pvalues_no_na$`data_pcadapt$pvalues`, probs = c(.10, 0.90))

top_10_percent <- subset(snps_pvalues_no_na, snps_pvalues_no_na$`data_pcadapt$pvalues` <= 0.02499572)
colnames(top_10_percent) <- c("LOCUS","PVALUE")

#SNPs with q-values less than α (expected FDR) are considered outliers.

qval <- qvalue(data_pcadapt$pvalues)$qvalues
alpha <- 0.05
outliers1.ints <- which(qval<alpha)
outliers1 <- as.character(loci[,1])[outliers1.ints]
outliers1





### Autosomes ###


## convert vcf to bed using PLINK ##
plink2 --vcf /home/rorton/projects/def-frasiert/rorton/MutationLoad/NARW_specific/autosomes/annotated.autosomes.NARW.segregating.parsed.vcf.gz --make-bed --out pcadapt --allow-extra-chr



## run PCAdapt in R ##

data <- read.pcadapt("/home/rorton/projects/def-frasiert/rorton/MutationLoad/NARW_specific/autosomes/pcadapt.bed", type = "bed")

data2 <- read.vcfR("/home/rorton/projects/def-frasiert/rorton/MutationLoad/NARW_specific/autosomes/annotated.autosomes.NARW.segregating.parsed.vcf.gz")
data3 <- vcfR2genlight(data2)


snp <- as.data.frame(locNames(data3))
ind <- as.data.frame(data3@ind.names)
colnames(ind) <-"INDIVIDUALS"

pop_map <- read.table("/home/rorton/projects/def-frasiert/rorton/MutationLoad/_text_files/NARW.females.pop", header=TRUE, stringsAsFactors = TRUE)
ind_pop_map <- merge(ind, pop_map, by=c("INDIVIDUALS"))


data_pcadapt <- pcadapt(data, K = 2, min.maf = .05) 

pca_adapt_pop_map_autosomes <-cbind(data_pcadapt$scores, ind_pop_map) 
colnames(pca_adapt_pop_map_autosomes) <- c("PC1","PC2", "IND","POPULATION")

snps_pvalues <- cbind(snp, data_pcadapt$pvalues)
snps_pvalues_no_na_autosomes <- na.omit(snps_pvalues)


write.table(pca_adapt_pop_map_autosomes, "/home/rorton/projects/def-frasiert/rorton/MutationLoad/NARW_specific/autosomes/pca_adapt_pop_map_autosomes", sep="\t", quote=FALSE)
write.table(snps_pvalues_no_na_autosomes, "/home/rorton/projects/def-frasiert/rorton/MutationLoad/NARW_specific/autosomes/snps_pvalues_no_na_autosomes", sep="\t", quote=FALSE)






quantile(snps_pvalues_no_na$`data_pcadapt$pvalues`, probs = c(.10, 0.90))

top_10_percent <- subset(snps_pvalues_no_na, snps_pvalues_no_na$`data_pcadapt$pvalues` <= 0.02499572)
colnames(top_10_percent) <- c("LOCUS","PVALUE")



#SNPs with q-values less than α (expected FDR) are considered outliers.

qval <- qvalue(data_pcadapt$pvalues)$qvalues
alpha <- 0.05
outliers1.ints <- which(qval<alpha)
outliers1 <- as.character(loci[,1])[outliers1.ints]
outliers1





#### get frequencies of outliers in SRW and BH #####
paste intermediate.txt stop_position.txt | awk '{print $1, $2, $5, $3, $4}' | tr -s " " "\t" | tail -n +2 > allele.freq.bed






### Bayescan ####


########################################################################################################
### file conversion not working with radiator ###
# convert vcf to bayescan input #

radiator::detect_genomic_format(data = "/home/rorton/projects/def-frasiert/rorton/MutationLoad/NARW_specific/all.variant.vcf.gz")

genomic_converter(data = "/home/rorton/projects/def-frasiert/rorton/MutationLoad/NARW_specific/all.variant.vcf.gz",
  output = c("bayescan"), filename="/home/rorton/projects/def-frasiert/rorton/MutationLoad/NARW_specific/test",
  parallel.core = parallel::detectCores() - 8)
########################################################################################################



### Convert VCF to bayes input ####


salloc --time=6:00:00 --mem-per-cpu=60G --ntasks=8 --account=def-frasiert


vcf <- read.vcfR("/home/rorton/projects/def-frasiert/rorton/MutationLoad/NARW_specific/autosomes/annotated.autosomes.NARW.segregating.parsed.vcf.gz")
pop_map <- read.table("/home/rorton/projects/def-frasiert/rorton/MutationLoad/_text_files/NARW.females.pop", header=TRUE, stringsAsFactors = TRUE)


radiator::detect_genomic_format(data = "/Users/richardorton/Desktop/annotated.autosomes.NARW.segregating.parsed.vcf.gz")

genomic_converter(data = "/Users/richardorton/Desktop/annotated.autosomes.NARW.segregating.parsed.vcf.gz",
  output = c("bayescan"), filename="/Users/richardorton/Desktop/bayescan.input")


pop_map <- read.table("/Users/richardorton/Desktop/NARW.females.pop", header=TRUE, stringsAsFactors = TRUE)



genind <- vcfR2genind(vcf)
genind@pop <- pop_map$STRATA
hierfstat <- genind2hierfstat(genind)

setwd()
write.bayescan(hierfstat)



### run bayescan ###

#!/bin/bash

#SBATCH --time=12:00:00
#SBATCH --account=def-frasiert
#SBATCH --cpus-per-task=8
#SBATCH --mem=60G

bayescan_2.1 dat.bsc -o bayescanLongRunOD10 -n 5000 -thin 10 -nbp 20 -pilot 5000 -burn 50000 -pr_odds 10









